Traceback (most recent call last):
  File "/Users/runner/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 58, in single_nb_execution
    executenb(
  File "/Users/runner/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/nbclient/client.py", line 1305, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/Users/runner/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/jupyter_core/utils/__init__.py", line 166, in wrapped
    return loop.run_until_complete(inner)
  File "/Users/runner/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
    return future.result()
  File "/Users/runner/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/nbclient/client.py", line 705, in async_execute
    await self.async_execute_cell(
  File "/Users/runner/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/nbclient/client.py", line 1058, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "/Users/runner/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/nbclient/client.py", line 914, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
# x1, x2, w1, w2, z1, z2の平均
rv_mean = [0, 0, 0, 0, 0, 0]

# 共分散行列　x1,  x2,  w1,  w2,  z1,  z2
rv_cov =  [[1,   0,   0,   0,   0,   0], # x1
           [0,   1, 0.5, 0.5,   0,   0], # x2
           [0, 0.5,   1,   0, 0.8,   0], # w1
           [0, 0.5,   0,   1,   0, 0.8], # w2
           [0,   0, 0.8,   0,   1,   0], # z1
           [0,   0,   0, 0.8,   0,   1]] # z2

# ランダム変数の生成
rv = multivariate_normal.rvs(rv_mean, rv_cov, size=1000)

# 説明変数と操作変数の抽出
x1 = rv[:,0]  # 外生変数
x2 = rv[:,1]  # 外生変数（欠落）
w1 = rv[:,2]  # 内生変数
w2 = rv[:,3]  # 内生変数
z1 = rv[:,4]  # 操作変数
z2 = rv[:,5]  # 操作変数

# yの生成
y = 1 + x1 + x2 + w1 + w2 + np.random.normal(size=1000)

# DataFrameの作成
var_dict = {'y':y,'x1':x1,'x2':x2,'w1':w1,'w2':w2,'z1':z1,'z2':z2}
df_endog2 = pd.DataFrame(var_dict)
------------------


[0;31m---------------------------------------------------------------------------[0m
[0;31mValueError[0m                                Traceback (most recent call last)
Cell [0;32mIn[13], line 13[0m
[1;32m      5[0m rv_cov [38;5;241m=[39m  [[[38;5;241m1[39m,   [38;5;241m0[39m,   [38;5;241m0[39m,   [38;5;241m0[39m,   [38;5;241m0[39m,   [38;5;241m0[39m], [38;5;66;03m# x1[39;00m
[1;32m      6[0m            [[38;5;241m0[39m,   [38;5;241m1[39m, [38;5;241m0.5[39m, [38;5;241m0.5[39m,   [38;5;241m0[39m,   [38;5;241m0[39m], [38;5;66;03m# x2[39;00m
[1;32m      7[0m            [[38;5;241m0[39m, [38;5;241m0.5[39m,   [38;5;241m1[39m,   [38;5;241m0[39m, [38;5;241m0.8[39m,   [38;5;241m0[39m], [38;5;66;03m# w1[39;00m
[1;32m      8[0m            [[38;5;241m0[39m, [38;5;241m0.5[39m,   [38;5;241m0[39m,   [38;5;241m1[39m,   [38;5;241m0[39m, [38;5;241m0.8[39m], [38;5;66;03m# w2[39;00m
[1;32m      9[0m            [[38;5;241m0[39m,   [38;5;241m0[39m, [38;5;241m0.8[39m,   [38;5;241m0[39m,   [38;5;241m1[39m,   [38;5;241m0[39m], [38;5;66;03m# z1[39;00m
[1;32m     10[0m            [[38;5;241m0[39m,   [38;5;241m0[39m,   [38;5;241m0[39m, [38;5;241m0.8[39m,   [38;5;241m0[39m,   [38;5;241m1[39m]] [38;5;66;03m# z2[39;00m
[1;32m     12[0m [38;5;66;03m# ランダム変数の生成[39;00m
[0;32m---> 13[0m rv [38;5;241m=[39m [43mmultivariate_normal[49m[38;5;241;43m.[39;49m[43mrvs[49m[43m([49m[43mrv_mean[49m[43m,[49m[43m [49m[43mrv_cov[49m[43m,[49m[43m [49m[43msize[49m[38;5;241;43m=[39;49m[38;5;241;43m1000[39;49m[43m)[49m
[1;32m     15[0m [38;5;66;03m# 説明変数と操作変数の抽出[39;00m
[1;32m     16[0m x1 [38;5;241m=[39m rv[:,[38;5;241m0[39m]  [38;5;66;03m# 外生変数[39;00m

File [0;32m~/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/scipy/stats/_multivariate.py:748[0m, in [0;36mmultivariate_normal_gen.rvs[0;34m(self, mean, cov, size, random_state)[0m
[1;32m    727[0m [38;5;28;01mdef[39;00m [38;5;21mrvs[39m([38;5;28mself[39m, mean[38;5;241m=[39m[38;5;28;01mNone[39;00m, cov[38;5;241m=[39m[38;5;241m1[39m, size[38;5;241m=[39m[38;5;241m1[39m, random_state[38;5;241m=[39m[38;5;28;01mNone[39;00m):
[1;32m    728[0m [38;5;250m    [39m[38;5;124;03m"""Draw random samples from a multivariate normal distribution.[39;00m
[1;32m    729[0m 
[1;32m    730[0m [38;5;124;03m    Parameters[39;00m
[0;32m   (...)[0m
[1;32m    746[0m 
[1;32m    747[0m [38;5;124;03m    """[39;00m
[0;32m--> 748[0m     dim, mean, cov_object [38;5;241m=[39m [38;5;28;43mself[39;49m[38;5;241;43m.[39;49m[43m_process_parameters[49m[43m([49m[43mmean[49m[43m,[49m[43m [49m[43mcov[49m[43m)[49m
[1;32m    749[0m     random_state [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_get_random_state(random_state)
[1;32m    751[0m     [38;5;28;01mif[39;00m [38;5;28misinstance[39m(cov_object, _covariance[38;5;241m.[39mCovViaPSD):

File [0;32m~/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/scipy/stats/_multivariate.py:417[0m, in [0;36mmultivariate_normal_gen._process_parameters[0;34m(self, mean, cov, allow_singular)[0m
[1;32m    410[0m dim, mean, cov [38;5;241m=[39m [38;5;28mself[39m[38;5;241m.[39m_process_parameters_psd([38;5;28;01mNone[39;00m, mean, cov)
[1;32m    411[0m [38;5;66;03m# After input validation, some methods then processed the arrays[39;00m
[1;32m    412[0m [38;5;66;03m# with a `_PSD` object and used that to perform computation.[39;00m
[1;32m    413[0m [38;5;66;03m# To avoid branching statements in each method depending on whether[39;00m
[1;32m    414[0m [38;5;66;03m# `cov` is an array or `Covariance` object, we always process the[39;00m
[1;32m    415[0m [38;5;66;03m# array with `_PSD`, and then use wrapper that satisfies the[39;00m
[1;32m    416[0m [38;5;66;03m# `Covariance` interface, `CovViaPSD`.[39;00m
[0;32m--> 417[0m psd [38;5;241m=[39m [43m_PSD[49m[43m([49m[43mcov[49m[43m,[49m[43m [49m[43mallow_singular[49m[38;5;241;43m=[39;49m[43mallow_singular[49m[43m)[49m
[1;32m    418[0m cov_object [38;5;241m=[39m _covariance[38;5;241m.[39mCovViaPSD(psd)
[1;32m    419[0m [38;5;28;01mreturn[39;00m dim, mean, cov_object

File [0;32m~/hostedtoolcache/Python/3.10.11/x64/lib/python3.10/site-packages/scipy/stats/_multivariate.py:167[0m, in [0;36m_PSD.__init__[0;34m(self, M, cond, rcond, lower, check_finite, allow_singular)[0m
[1;32m    165[0m [38;5;28;01mif[39;00m np[38;5;241m.[39mmin(s) [38;5;241m<[39m [38;5;241m-[39meps:
[1;32m    166[0m     msg [38;5;241m=[39m [38;5;124m"[39m[38;5;124mThe input matrix must be symmetric positive semidefinite.[39m[38;5;124m"[39m
[0;32m--> 167[0m     [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m(msg)
[1;32m    168[0m d [38;5;241m=[39m s[s [38;5;241m>[39m eps]
[1;32m    169[0m [38;5;28;01mif[39;00m [38;5;28mlen[39m(d) [38;5;241m<[39m [38;5;28mlen[39m(s) [38;5;129;01mand[39;00m [38;5;129;01mnot[39;00m allow_singular:

[0;31mValueError[0m: The input matrix must be symmetric positive semidefinite.

